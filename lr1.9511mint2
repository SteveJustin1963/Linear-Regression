// APU Control Functions
:A          // Initialize APU
#16 #81 /O  // Reset command - Z80 will wait automatically
;

:B          // Push float to APU and convert
#30 #81 /O  // FLTD command - Z80 waits via hardware
;

:C          // Pop float from APU as integer
#31 #81 /O  // FIXD command - Z80 waits via hardware
#80 /I      // Read result
;

:E          // Add on APU stack
#10 #81 /O  // FADD command - Z80 waits via hardware
;

:F          // Subtract on APU stack
#12 #81 /O  // FSUB command - Z80 waits via hardware
;

:G          // Multiply on APU stack
#14 #81 /O  // FMUL command - Z80 waits via hardware
;

:H          // Divide on APU stack
#16 #81 /O  // FDIV command - Z80 waits via hardware
;

// Store data arrays - using scaled integers
:M [ 150 200 250 300 350 ] x1!    // x1 values (scaled down by 100)
   [ 300 400 500 600 700 ] x2!    // x2 values (scaled down by 100)
   [ 200 250 300 350 400 ] y!     // y values (scaled down by 10)
   5 n!  // Number of data points
;

// Calculate means using APU stack
:N 0 s1! 0 s2! 0 sy!     // Initialize sums
   n(
     // Sum x1 values
     /i x1? #80 /O       // Push x1[i] to APU
     B                    // Convert to float
     s1 #80 /O B         // Push running sum
     E                    // Add
     C s1!               // Store back
     
     // Sum x2 values  
     /i x2? #80 /O
     B
     s2 #80 /O B
     E
     C s2!
     
     // Sum y values
     /i y? #80 /O
     B
     sy #80 /O B
     E
     C sy!
   )
   
   // Calculate means
   s1 #80 /O B          // Push sum_x1
   n #80 /O B           // Push n
   H                    // Divide
   C m1!                // Store mean_x1
   
   s2 #80 /O B
   n #80 /O B
   H
   C m2!
   
   sy #80 /O B
   n #80 /O B
   H
   C my!
;

// Calculate regression coefficients
:O 0 sxy1! 0 sxx1! 0 sxy2! 0 sxx2!
   n(
     // For x1 term
     /i x1? #80 /O B    // Push x1[i] as float
     m1 #80 /O B        // Push mean_x1
     F                   // Subtract
     " #80 /O           // Duplicate
     
     /i y? #80 /O B     // Push y[i]
     my #80 /O B        // Push mean_y
     F                   // Subtract
     
     G                   // Multiply
     sxy1 #80 /O B      // Push current sum
     E                   // Add to sum
     C sxy1!            // Store sum
     
     G                   // Square term
     sxx1 #80 /O B
     E
     C sxx1!
     
     // For x2 term
     /i x2? #80 /O B
     m2 #80 /O B
     F
     " #80 /O
     
     /i y? #80 /O B
     my #80 /O B
     F
     
     G
     sxy2 #80 /O B
     E
     C sxy2!
     
     G
     sxx2 #80 /O B
     E
     C sxx2!
   )
   
   // Calculate coefficients
   sxy1 #80 /O B
   sxx1 #80 /O B
   H
   C b1!
   
   sxy2 #80 /O B
   sxx2 #80 /O B
   H
   C b2!
;

// Calculate intercept
:P my #80 /O B          // Push mean_y
   m1 #80 /O B          // Push mean_x1
   b1 #80 /O B          // Push b1
   G                     // Multiply
   F                     // Subtract
   m2 #80 /O B          // Push mean_x2
   b2 #80 /O B          // Push b2
   G                     // Multiply
   F                     // Subtract
   C b0!                // Store intercept
;

// Print results
:Q `Multiple Regression Results:` /N
   `y = ` b0 100 * .    // Scale up for display
   ` + ` b1 100 * .
   `x1 + ` b2 100 * .
   `x2` /N
   `(Note: coefficients scaled by 100)` /N
;

// Main regression function
:R A      // Initialize APU
   M      // Load data
   N      // Calculate means
   O      // Calculate coefficients
   P      // Calculate intercept
   Q      // Print results
;
